import com.android.build.api.transform.DirectoryInput
import com.android.build.api.transform.JarInput
import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Status
import com.android.build.api.transform.Transform
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInput
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.internal.pipeline.TransformTask
import com.android.build.gradle.internal.scope.VariantScope
import com.android.build.gradle.internal.transforms.DexTransform
import com.android.build.gradle.internal.transforms.JarMergingTransform
import com.google.common.collect.ImmutableList
import com.google.common.collect.Lists

import java.lang.reflect.Field

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.example.tong.myapplication"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.2.1'

    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'
}

public class FastdexCreateMaindexlistFileTask extends DefaultTask {
    def applicationVariant

    FastdexCreateMaindexlistFileTask() {
        group = 'fastdex'
    }

    @TaskAction
    void createFile() {
        if (applicationVariant != null) {
            File maindexlistFile = applicationVariant.getVariantData().getScope().getMainDexListFile()
            File parentFile = maindexlistFile.getParentFile()
            if (!parentFile.exists()) {
                parentFile.mkdirs()
            }

            if (!maindexlistFile.exists()) {
                maindexlistFile.createNewFile()
            }
        }
    }
}

public class MyJarMergingTransform extends Transform {
    Transform base

    MyJarMergingTransform(Transform base) {
        this.base = base
    }

    @Override
    String getName() {
        return base.getName()
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return base.getInputTypes()
    }

    @Override
    Set<QualifiedContent.Scope> getScopes() {
        return base.getScopes()
    }

    @Override
    boolean isIncremental() {
        return base.isIncremental()
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, IOException, InterruptedException {
        List<JarInput> jarInputs = Lists.newArrayList();
        List<DirectoryInput> dirInputs = Lists.newArrayList();

        for (TransformInput input : transformInvocation.getInputs()) {
            jarInputs.addAll(input.getJarInputs());
        }

        for (TransformInput input : transformInvocation.getInputs()) {
            dirInputs.addAll(input.getDirectoryInputs());
        }

        for (JarInput jarInput : jarInputs) {
            println("===MyJarMergingTransform ${jarInput}")
        }

        for (DirectoryInput directoryInput : dirInputs) {
            println("===MyJarMergingTransform ${directoryInput}")
        }

        //base.transform(transformInvocation)
    }
}

public class FastdexTransform extends Transform {
    Transform base

    FastdexTransform(Transform base) {
        this.base = base
    }

    @Override
    String getName() {
        return base.getName()
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return base.getInputTypes()
    }

    @Override
    Set<QualifiedContent.Scope> getScopes() {
        return base.getScopes()
    }

    @Override
    boolean isIncremental() {
        return base.isIncremental()
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, IOException, InterruptedException {
        List<JarInput> jarInputs = Lists.newArrayList();
        List<DirectoryInput> dirInputs = Lists.newArrayList();

        for (TransformInput input : transformInvocation.getInputs()) {
            jarInputs.addAll(input.getJarInputs());
        }

        for (TransformInput input : transformInvocation.getInputs()) {
            dirInputs.addAll(input.getDirectoryInputs());
        }

        for (JarInput jarInput : jarInputs) {
            println("===FastdexTransform ${jarInput}")
        }

        for (DirectoryInput directoryInput : dirInputs) {
            println("===FastdexTransform ${directoryInput}")
        }
    }
}

project.afterEvaluate {
    if (!project.plugins.hasPlugin('com.android.application')) {
        throw new GradleException('generateTinkerApk: Android Application plugin required')
    }

    android.applicationVariants.all { variant ->
        def variantOutput = variant.outputs.first()
        def variantName = variant.name.capitalize()

        Task multidexlistTask = getTransformClassesWithMultidexlistTask(project,variantName)
        if (multidexlistTask != null) {
            /**
             * transformClassesWithMultidexlistFor${variantName}的作用是计算哪些类必须放在第一个dex里面，由于fastdex使用替换Application的方案隔离了项目代码的dex，
             * 所以这个任务就没有存在的意义了，禁止掉这个任务以提高打包速度，但是transformClassesWithDexFor${variantName}会使用这个任务输出的txt文件，
             * 所以就生成一个空文件防止报错
             */
            FastdexCreateMaindexlistFileTask createFileTask = project.tasks.create("fastdexCreate${variantName}MaindexlistFileTask", FastdexCreateMaindexlistFileTask)
            createFileTask.applicationVariant = variant

            multidexlistTask.dependsOn createFileTask
            multidexlistTask.enabled = false
        }


        if ("Debug".equals(variantName)) {

            project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
                @Override
                public void graphPopulated(TaskExecutionGraph taskGraph) {
                    for (Task task : taskGraph.getAllTasks()) {
                        if (task.getProject().equals(project)
                                && task instanceof TransformTask
                                && task.name.toLowerCase().contains(variant.name.toLowerCase())) {

                            Transform transform = ((TransformTask) task).getTransform()
                            //如果开启了multidex有这个任务
                            if ((((transform instanceof JarMergingTransform)) && !(transform instanceof MyJarMergingTransform))) {
                                project.logger.error("==fastdex find jarmerging transform. transform class: " + task.transform.getClass() + " . task name: " + task.name)

                                MyJarMergingTransform jarMergingTransform = new MyJarMergingTransform(transform)
                                Field field = getFieldByName(task.getClass(),'transform')
                                field.setAccessible(true)
                                field.set(task,jarMergingTransform)
                            }

                            if ((((transform instanceof DexTransform)) && !(transform instanceof FastdexTransform))) {
                                project.logger.error("==fastdex find dex transform. transform class: " + task.transform.getClass() + " . task name: " + task.name)

                                //代理DexTransform,实现自定义的转换
                                FastdexTransform fastdexTransform = new FastdexTransform(transform)
                                Field field = getFieldByName(task.getClass(),'transform')
                                field.setAccessible(true)
                                field.set(task,fastdexTransform)
                            }
                        }
                    }
                }
            });
        }
    }
}

Task getJarMergingTask(Project project, String variantName) {
    String generateSourcesTaskName = "transformClassesWithJarMergingFor${variantName}"
    try {
        return  project.tasks.getByName(generateSourcesTaskName)
    } catch (Throwable e) {
        return null
    }
}

Task getMultidexlistTask(Project project, String variantName) {
    String generateSourcesTaskName = "transformClassesWithMultidexlistFor${variantName}"
    try {
        return  project.tasks.getByName(generateSourcesTaskName)
    } catch (Throwable e) {
        return null
    }
}

Field getFieldByName(Class<?> aClass, String name) {
    Class<?> currentClass = aClass;
    while (currentClass != null) {
        try {
            return currentClass.getDeclaredField(name);
        } catch (NoSuchFieldException e) {
            // ignored.
        }
        currentClass = currentClass.getSuperclass();
    }
    return null;
}


Task getTransformClassesWithMultidexlistTask(Project project, String variantName) {
    String transformClassesWithMultidexlistTaskName = "transformClassesWithMultidexlistFor${variantName}"
    try {
        return project.tasks.getByName(transformClassesWithMultidexlistTaskName)
    } catch (Throwable e) {
        //fix issue #1 如果没有开启multidex会报错
        return null
    }
}