apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

println "projectProperties: " + project.gradle.startParameter.projectProperties

android {
    signingConfigs {
        config {
            keyAlias 'alias'
            keyPassword '123456'
            storeFile file('/Users/tong/Projects/fastdex-test-project/hook-build-cache/fastdex-default.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion 24
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.github.typ0520.hook_build_cache"
        minSdkVersion 21
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.config
        }
    }

//    productFlavors {
//        flavor1 {
//        }
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'
//    compile project(':javalib')
//    compile project(':aarlib')
//    compile project(':libgroup:javalib2')
}


import com.android.apkzlib.zfile.ApkCreatorFactory
import com.android.build.api.transform.DirectoryInput
import com.android.build.api.transform.JarInput
import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Transform
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInput
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.internal.pipeline.TransformTask
import com.android.build.gradle.internal.transforms.DexTransform
import com.android.build.gradle.internal.transforms.JarMergingTransform
import com.android.builder.core.DexOptions
import com.android.builder.model.SigningConfig
import com.android.builder.packaging.PackagerException
import com.android.ide.common.process.ProcessException
import com.android.ide.common.process.ProcessOutputHandler
import com.android.ide.common.signing.KeytoolException
import com.google.common.collect.Lists

import java.lang.reflect.Field
import com.android.build.api.transform.Format

public class MyJarMergingTransform extends Transform {
    Transform base

    MyJarMergingTransform(Transform base) {
        this.base = base
    }

    @Override
    String getName() {
        return base.getName()
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return base.getInputTypes()
    }

    @Override
    Set<QualifiedContent.Scope> getScopes() {
        return base.getScopes()
    }

    @Override
    boolean isIncremental() {
        return base.isIncremental()
    }

    @Override
    void transform(TransformInvocation invocation) throws TransformException, IOException, InterruptedException {
        List<JarInput> jarInputs = Lists.newArrayList();
        List<DirectoryInput> dirInputs = Lists.newArrayList();

        for (TransformInput input : invocation.getInputs()) {
            jarInputs.addAll(input.getJarInputs());
        }
        for (TransformInput input : invocation.getInputs()) {
            dirInputs.addAll(input.getDirectoryInputs());
        }
        for (JarInput jarInput : jarInputs) {
            println("==jarmerge jar      : ${jarInput.file}")
        }
        for (DirectoryInput directoryInput : dirInputs) {
            println("==jarmerge directory: ${directoryInput.file}")
        }
        File combinedJar = invocation.outputProvider.getContentLocation("combined", base.getOutputTypes(), base.getScopes(), Format.JAR);
        println("==combinedJar exists ${combinedJar.exists()} ${combinedJar}")
        base.transform(invocation)
        println("==combinedJar exists ${combinedJar.exists()} ${combinedJar}")
    }
}

public class MyAndroidBuilder extends  com.android.builder.core.AndroidBuilder {
    MyAndroidBuilder(com.android.builder.core.AndroidBuilder base) {
        super(base.mProjectId,
                base.mCreatedBy,
                base.mProcessExecutor,
                base.mJavaProcessExecutor,
                base.mErrorReporter,
                base.mLogger,
                base.mVerboseExec)

        setSdkInfo(base.getSdkInfo())
        setTargetInfo(base.getTargetInfo())
        setLibraryRequests(base.mLibraryRequests)
    }

    @Override
    void generateApkData(File apkFile, File outResFolder, String mainPkgName, String resName) throws ProcessException, IOException {
        println("generateApkData,apkFile: " + apkFile)

        super.generateApkData(apkFile, outResFolder, mainPkgName, resName)
    }

    @Override
    void preDexLibrary(File inputFile, File outFile, boolean multiDex, DexOptions dexOptions, ProcessOutputHandler processOutputHandler) throws IOException, InterruptedException, ProcessException {
        println("preDexLibrary,inputFile: " + inputFile + " ,outFile: " + outFile + " ,multidex: " + multiDex)
        super.preDexLibrary(inputFile, outFile, multiDex, dexOptions, processOutputHandler)
    }

    @Override
    void convertByteCode(Collection<File> inputs, File outDexFolder, boolean multidex, File mainDexList, DexOptions dexOptions, ProcessOutputHandler processOutputHandler) throws IOException, InterruptedException, ProcessException {
        println("convertByteCode,outDexFolder: " + outDexFolder + " ,mainDexList: " + mainDexList + " ,inputs: " + inputs)
        super.convertByteCode(inputs, outDexFolder, multidex, mainDexList, dexOptions, processOutputHandler)
    }

    @Override
    void packageCodeSplitApk(File androidResPkg, Set<File> dexFiles, SigningConfig signingConfig, File outApkLocation, File incrementalDir, ApkCreatorFactory apkCreatorFactory) throws KeytoolException, PackagerException, IOException {
        println("packageCodeSplitApk,dexFiles: " + dexFiles)

        super.packageCodeSplitApk(androidResPkg, dexFiles, signingConfig, outApkLocation, incrementalDir, apkCreatorFactory)
    }
}

public class MyDexTransform extends Transform {
    Transform base
    Project project
    MyDexTransform(Transform base) {
        println('##base.dexOptions.getPreDexLibraries(): ' + base.dexOptions.getPreDexLibraries())
        println('##debugMode: ' + base.debugMode)
        println('##base.dexOptions: ' + base.dexOptions)
        println('##intermediateFolder: ' + base.intermediateFolder)
        println('##mainDexListFile: ' + base.mainDexListFile)
        println('##base.buildCache: ' + base.buildCache)

        this.base = new DexTransform(
                base.dexOptions,
                base.debugMode,
                base.multiDex,
                base.mainDexListFile,//new File("/Users/tong/Projects/fastdex-test-project/build-cache-test/maindexlist.txt"),
                base.intermediateFolder,
                new MyAndroidBuilder(base.androidBuilder),
                base.logger.logger,
                base.instantRunBuildContext,
                base.buildCache);
    }

    @Override
    String getName() {
        return base.getName()
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return base.getInputTypes()
    }

    @Override
    Set<QualifiedContent.Scope> getScopes() {
        return base.getScopes()
    }

    @Override
    boolean isIncremental() {
        return base.isIncremental()
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, IOException, InterruptedException {
        List<JarInput> jarInputs = Lists.newArrayList();
        List<DirectoryInput> dirInputs = Lists.newArrayList();

        for (TransformInput input : transformInvocation.getInputs()) {
            jarInputs.addAll(input.getJarInputs());
        }
        for (TransformInput input : transformInvocation.getInputs()) {
            dirInputs.addAll(input.getDirectoryInputs());
        }
        for (JarInput jarInput : jarInputs) {
            println("===dex jar      : ${jarInput.file}")
        }
        for (DirectoryInput directoryInput : dirInputs) {
            println("===dex directory: ${directoryInput.file}")
        }
        base.transform(transformInvocation)




//        File file1 = new File(project.buildDir,"intermediates/transforms/dex/release/folders/1000/1/release_6979713c928ec8f90adf2aec25731979c7e7e5f7/classes.dex")
//        File file2 = new File(project.buildDir,"intermediates/transforms/dex/release/folders/1000/1/release_6979713c928ec8f90adf2aec25731979c7e7e5f7/classes2.dex")
//
//        file1.renameTo(file2)

        ///Users/tong/Projects/fastdex-test-project/hook-build-cache/app/build/intermediates/transforms/dex/debug/folders/1000/1/debug_57d753944172ad6973d2c28736c245348cad217b

        File file = new File(project.buildDir,"intermediates/transforms/dex/debug/folders/1000")
        file.deleteDir()

        project.copy {
            from project.rootProject.file('dexdir')
            into new File(project.buildDir,"intermediates/transforms/dex/debug/folders/1000/1/debug_57d753944172ad6973d2c28736c245348cad217b")
        }

        project.copy {
            from project.rootProject.file('classes.dex')
            into new File(project.buildDir,"intermediates/transforms/dex/debug/folders/1000/1/0_0")
        }
    }
}



project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def flavor = variant.getVariantData().getScope().getVariantConfiguration().getMergedFlavor()

        println "getMergedFlavor: " + flavor;

        project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
            @Override
            public void graphPopulated(TaskExecutionGraph taskGraph) {
                for (Task task : taskGraph.getAllTasks()) {
                    if (task.getProject().equals(project) && task instanceof TransformTask && task.name.toLowerCase().contains(variant.name.toLowerCase())) {
                        Transform transform = ((TransformTask) task).getTransform()
                        //如果开启了multidex有这个任务
                        if ((((transform instanceof JarMergingTransform)) && !(transform instanceof MyJarMergingTransform))) {
                            project.logger.error("==fastdex find jarmerging transform. transform class: " + task.transform.getClass() + " . task name: " + task.name)

                            MyJarMergingTransform jarMergingTransform = new MyJarMergingTransform(transform)
                            Field field = getFieldByName(task.getClass(),'transform')
                            field.setAccessible(true)
                            field.set(task,jarMergingTransform)
                        }

                        if ((((transform instanceof DexTransform)) && !(transform instanceof MyDexTransform))) {
                            project.logger.error("==fastdex find dex transform. transform class: " + task.transform.getClass() + " . task name: " + task.name)

                            //代理DexTransform,实现自定义的转换
                            MyDexTransform fastdexTransform = new MyDexTransform(transform)
                            fastdexTransform.project = project
                            Field field = getFieldByName(task.getClass(),'transform')
                            field.setAccessible(true)
                            field.set(task,fastdexTransform)
                        }
                    }
                }
            }
        });

    }
}

Field getFieldByName(Class<?> aClass, String name) {
    Class<?> currentClass = aClass;
    while (currentClass != null) {
        try {
            return currentClass.getDeclaredField(name);
        } catch (NoSuchFieldException e) {
            // ignored.
        }
        currentClass = currentClass.getSuperclass();
    }
    return null;
}