
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'fastdex.app'

fastdex {
    dexMergeThreshold = 2
}

println "projectProperties: " + project.gradle.startParameter.projectProperties

//-Pandroid.injected.invoked.from.ide=true -Pandroid.injected.build.api=23 -Pandroid.injected.build.density=560dpi -Pandroid.injected.build.abi=x86 --init-script /private/var/folders/my/qh6gs8893nn7lsmd8jkwnbzr0000gn/T/asLocalRepo667.gradle
android {
    signingConfigs {
        config {
            keyAlias 'alias'
            keyPassword '123456'
            storeFile file('/Users/tong/Projects/fastdex-test-project/hook-build-cache/fastdex-default.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion 24
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.github.typ0520.hook_build_cache"
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.config
        }
    }

//    productFlavors {
//        flavor1 {
//        }
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'
//    compile project(':javalib')
//    compile project(':aarlib')
//    compile project(':libgroup:javalib2')
}

class MyPackageApplication extends com.android.build.gradle.tasks.PackageApplication {

    MyPackageApplication() {
        println ("MyPackageApplication 哈哈哈")
    }

    @Override
    protected void doFullTaskAction() throws IOException {
        println ("MyPackageApplication 哈哈哈2")
        super.doFullTaskAction()
    }
}


project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def variantOutput = variant.outputs.first()

        if ("Debug".equals(variantName)) {
            //taskManager

            //2.1.0
            println "## " +  com.android.utils.FileUtils.join(variant.getVariantData().getOutputs().get(0).getScope().getVariantScope().getDexOutputFolder(), com.android.build.gradle.internal.pipeline.IntermediateFolderUtils.FOLDERS, typesToString(com.android.build.gradle.internal.pipeline.TransformManager.CONTENT_DEX))

            variant.getVariantData().getOutputs().get(0).getScope().getVariantScope().getTransformManager().getStreams().each {
                println "## " + it
            }

            def task = tasks['packageDebug']
            task.doFirst {
                //com.android.build.gradle.internal.scope.DefaultGradlePackagingScope packagingScope = new com.android.build.gradle.internal.scope.DefaultGradlePackagingScope(variant.getVariantData().getOutputs().get(0).getScope());
//
//                for (File file : packagingScope.getDexFolders()) {
//                    println file
//                }

                //println packagingScope.getDexFolders()




//                variant.getVariantData().getOutputs().get(0).getScope().getVariantScope().getTransformManager().getPipelineOutput(com.android.build.gradle.internal.pipeline.StreamFilter.DEX).keySet().each {
//                    println it
//                }



                println "==============="
//                Map updatedDex = com.android.builder.files.IncrementalRelativeFileSets.fromZipsAndDirectories(packagingScope.getDexFolders())
//
//                for (Object obj : updatedDex.keySet()) {
//                    println ("${obj.file}")
//                }
            }
        }
    }
}

private static String typesToString(Set types) {
    int value = 0;
    for (Object type : types) {
        value += type.getValue();
    }

    return String.format("%x", value);
}