/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6


def getAndroidHome() {
    def androidHomeEnv = System.getenv("ANDROID_HOME")
    if (androidHomeEnv == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        androidHomeEnv = properties.getProperty('sdk.dir')
    }
    if (androidHomeEnv == null) {
        throw new Exception("ANDROID_HOME environment variable is not set")
    }
    def androidHome = new File(androidHomeEnv)
    if (!androidHome.isDirectory()) throw new Exception("Environment variable ANDROID_HOME is not pointing to a directory")
    return androidHome
}

// If not there, we're in one of the AOSP release branches where the
// repo configuration does not include the whole prebuilts repository.
// Fetch the SDK via $ANDROID_HOME instead.
File androidJar = new File(getAndroidHome(),"/platforms/android-23/android.jar");
if (!androidJar.exists()) {
    throw new RuntimeException("android-23 android.jar not found at " + androidJar.absolutePath)
}


repositories {
    maven { url System.env.ANDROID_HOME + '/extras/android/m2repository/' }
}

configurations {
    provided
}

dependencies {
    provided files(androidJar)

    compile project(':instant-run-common')
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

jar {
    from {
        configurations.compile.collect { it.isFile() ? zipTree(it) : it }
    }
    exclude('com/android/annotations/**', 'NOTICE')
}

// set proper classpath and turn off strict mode.
tasks.withType(Javadoc) {
    classpath += files(androidJar)
}
