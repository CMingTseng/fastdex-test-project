import com.android.build.api.transform.DirectoryInput
import com.android.build.api.transform.JarInput
import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Status
import com.android.build.api.transform.Transform
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInput
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.internal.pipeline.TransformTask
import com.android.build.gradle.internal.scope.VariantScope
import com.android.build.gradle.internal.transforms.DexTransform
import com.google.common.collect.ImmutableList
import com.google.common.collect.Lists

import java.lang.reflect.Field

apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.example.tong.myapplication"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.2.1'
}

public class FastdexTransform extends Transform {
    Transform base

    FastdexTransform(Transform base) {
        this.base = base
    }

    @Override
    String getName() {
        return base.getName()
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return base.getInputTypes()
    }

    @Override
    Set<QualifiedContent.Scope> getScopes() {
        return base.getScopes()
    }

    @Override
    boolean isIncremental() {
        return base.isIncremental()
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, IOException, InterruptedException {
        List<JarInput> jarInputs = Lists.newArrayList();
        List<DirectoryInput> dirInputs = Lists.newArrayList();

        for (TransformInput input : transformInvocation.getInputs()) {
            jarInputs.addAll(input.getJarInputs());
        }

        for (TransformInput input : transformInvocation.getInputs()) {
            dirInputs.addAll(input.getDirectoryInputs());
        }

        for (JarInput jarInput : jarInputs) {
            println("===fastdex ${jarInput}")
        }

        for (DirectoryInput directoryInput : dirInputs) {
            println("===fastdex ${directoryInput}")
        }
    }
}

project.afterEvaluate {
    if (!project.plugins.hasPlugin('com.android.application')) {
        throw new GradleException('generateTinkerApk: Android Application plugin required')
    }

    android.applicationVariants.all { variant ->
        def variantOutput = variant.outputs.first()
        def variantName = variant.name.capitalize()

        VariantScope variantScope = variant.variantData.getScope()

        Task jarMergingTask = getJarMergingTask(project,variantName)
        println("=====jarMergingTask.transform : ${jarMergingTask.transform}")

        println("=====jarMergingTask : ${jarMergingTask.getClass().getSuperclass()}")

        println("=====哈哈哈 : ${variantScope.transformManager.transforms}")
//        jarMergingTask.enabled = false
//
//        Task multidexlistTask = getMultidexlistTask(project,variantName)
//        multidexlistTask.enabled = false

        project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
            @Override
            public void graphPopulated(TaskExecutionGraph taskGraph) {
                Task jarMergingTask2 = getJarMergingTask(project,variantName)

                println("=====jarMergingTask3.transform : ${jarMergingTask2.transform}")

                for (Task task : taskGraph.getAllTasks()) {
                    if (task.getProject().equals(project)
                            && task.name.toLowerCase().contains(variant.name.toLowerCase())) {
                    }

                    if (task.getProject().equals(project)
                            && task instanceof TransformTask
                            && task.name.toLowerCase().contains(variant.name.toLowerCase())) {

                        Transform transform = ((TransformTask) task).getTransform()
                        if ((((transform instanceof DexTransform)) && !(transform instanceof FastdexTransform))) {
                            project.logger.error("==fastdex find dex transform. transform class: " + task.transform.getClass() + " . task name: " + task.name)

                            //代理DexTransform,实现自定义的转换
                            FastdexTransform fastdexTransform = new FastdexTransform(transform)
                            Field field = getFieldByName(task.getClass(),'transform')
                            field.setAccessible(true)
                            field.set(task,fastdexTransform)
                        }

                        println("*******task : ${task}")
                        println("*******transform : ${transform}")
                    }
                }
            }
        });
    }
}

Task getJarMergingTask(Project project, String variantName) {
    String generateSourcesTaskName = "transformClassesWithJarMergingFor${variantName}"
    try {
        return  project.tasks.getByName(generateSourcesTaskName)
    } catch (Throwable e) {
        return null
    }
}

Task getMultidexlistTask(Project project, String variantName) {
    String generateSourcesTaskName = "transformClassesWithMultidexlistFor${variantName}"
    try {
        return  project.tasks.getByName(generateSourcesTaskName)
    } catch (Throwable e) {
        return null
    }
}

Field getFieldByName(Class<?> aClass, String name) {
    Class<?> currentClass = aClass;
    while (currentClass != null) {
        try {
            return currentClass.getDeclaredField(name);
        } catch (NoSuchFieldException e) {
            // ignored.
        }
        currentClass = currentClass.getSuperclass();
    }
    return null;
}