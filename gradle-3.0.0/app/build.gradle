import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Transform
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.internal.dependency.VariantDependencies
import com.android.build.gradle.internal.pipeline.TransformTask

import java.lang.reflect.Field

apply plugin: 'com.android.application'
//apply plugin: 'fastdex.app'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "mcare.example.com.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.zhy:okhttputils:2.4.1'
    compile project(':mylibrary')
    compile project(':javalib')
}

import com.android.apkzlib.zfile.ApkCreatorFactory
import com.android.build.api.transform.DirectoryInput
import com.android.build.api.transform.JarInput
import com.android.build.api.transform.QualifiedContent
import com.android.build.api.transform.Transform
import com.android.build.api.transform.TransformException
import com.android.build.api.transform.TransformInput
import com.android.build.api.transform.TransformInvocation
import com.android.build.gradle.internal.pipeline.TransformTask
import com.android.build.gradle.internal.transforms.DexTransform
import com.android.build.gradle.internal.transforms.JarMergingTransform
import com.android.builder.core.DexOptions
import com.android.builder.model.SigningConfig
import com.android.builder.packaging.PackagerException
import com.android.ide.common.process.ProcessException
import com.android.ide.common.process.ProcessOutputHandler
import com.android.ide.common.signing.KeytoolException
import com.google.common.collect.Lists

import java.lang.reflect.Field
import com.android.build.api.transform.Format

public class MyDexArchiveBuilderTransform extends com.android.build.api.transform.Transform {
    com.android.build.api.transform.Transform base

    MyDexArchiveBuilderTransform(com.android.build.api.transform.Transform base) {
        this.base = base
    }

    @Override
    String getName() {
        return base.getName()
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return base.getInputTypes()
    }

    @Override
    Set<? super QualifiedContent.Scope> getScopes() {
        return base.getScopes()
    }

    @Override
    boolean isIncremental() {
        return base.isIncremental()
    }

    @Override
    public void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {
        List<JarInput> jarInputs = Lists.newArrayList();
        List<DirectoryInput> dirInputs = Lists.newArrayList();

        for (TransformInput input : transformInvocation.getInputs()) {
            jarInputs.addAll(input.getJarInputs());
        }
        for (TransformInput input : transformInvocation.getInputs()) {
            dirInputs.addAll(input.getDirectoryInputs());
        }
        for (JarInput jarInput : jarInputs) {
            println("===dex jar      : ${jarInput.file}")
        }
        for (DirectoryInput directoryInput : dirInputs) {
            println("===dex directory: ${directoryInput.file}")
        }

        //打桩
        base.transform(transformInvocation)

        throw new RuntimeException("")
    }

    public static Field getFieldByName(Class<?> aClass, String name) {
        Class<?> currentClass = aClass;
        while (currentClass != null) {
            try {
                return currentClass.getDeclaredField(name);
            } catch (NoSuchFieldException e) {
                // ignored.
            }
            currentClass = currentClass.getSuperclass();
        }
        return null;
    }
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def variantOutput = variant.outputs.first()

        println "android: " + project.getClass()
        if (true || "Debug".equals(variantName)) {
           VariantDependencies variantDeps = variant.getVariantData().getVariantDependency();


            //com.android.builder.model.Variant
            //variantDeps.getCompileClasspath().getAllDependencies()

//            com.android.builder.model.JavaLibrary
//            for (Dependency dependency : variantDeps.getCompileClasspath().getAllDependencies()) {
//                if (dependency instanceof org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency) {
//                    println "dependency: " + dependency
//                }
//            }

            //println "getDependencies: /" + project.getDependencies()

            //com.android.builder.model.AndroidProject
            //project

            //org.gradle.tooling.provider.model.ToolingModelBuilder
            //println "variant.getMainArtifact(): " + variant.getMainArtifact()



            def variantScope = variant.variantData.getScope();
            def artifacts = com.android.build.gradle.internal.ide.ArtifactDependencyGraph.getAllArtifacts(variantScope,  com.android.build.gradle.internal.publishing.AndroidArtifacts.ConsumedConfigType.COMPILE_CLASSPATH,null);

            for (org.gradle.api.artifacts.result.ResolvedArtifactResult artifact : artifacts) {
                if (artifact.getDependencyType() == com.android.build.gradle.internal.ide.ArtifactDependencyGraph.DependencyType.JAVA) {
                    File jarFile = artifact.getFile()

                    println "##jarFile: " + jarFile
                }
                else {
                    final File explodedFolder = artifact.getFile()
                    File aarFile = artifact.bundleResult != null ? artifact.bundleResult.getFile() : explodedFolder

                    println "##aarFile: " + aarFile
                }
            }

            project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
                @Override
                public void graphPopulated(TaskExecutionGraph taskGraph) {
                    for (Task task : taskGraph.getAllTasks()) {
                        if (task.getProject().equals(project)
                                && task instanceof com.android.build.gradle.internal.pipeline.TransformTask
                                //fix #
                                && task.name.endsWith("DexBuilderFor" + variantName)) {

                            println "task: " + task

                            Transform transform = ((TransformTask) task).getTransform()

                            //transformClassesWithDexBuilderForDebug
                            if ((((transform instanceof com.android.build.gradle.internal.transforms.DexArchiveBuilderTransform)) && !(transform instanceof MyDexArchiveBuilderTransform))) {
                                //代理DexTransform,实现自定义的转换
                                MyDexArchiveBuilderTransform fastdexTransform = new MyDexArchiveBuilderTransform(transform)
                                println "" + task.getClass()

                                //Class transformTaskClass = Class.forName("com.android.build.gradle.internal.pipeline")

                                Field field = MyDexArchiveBuilderTransform.getFieldByName(task.getClass(),'transform')
                                //Field field = transformTaskClass.getDeclaredField("transform")

                                //println "field val: " + field.get(task)

                                field.setAccessible(true)
                                field.set(task,fastdexTransform)
                            }
                        }
                    }
                }
            });
        }
    }
}
