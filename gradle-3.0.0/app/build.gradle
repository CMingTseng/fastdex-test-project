apply plugin: 'com.android.application'
//apply plugin: 'fastdex.app'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "mcare.example.com.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

//        product {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
    }

//    productFlavors {
//        dev {
//            minSdkVersion 21
//
//            flavorDimensions "versionCode"
//        }
//
//        normal {
//            //flavorDimensions "versionCode"
//        }
//    }
}

dependencies {
    compile 'com.zhy:okhttputils:2.4.1'
    //compile project(':mylibrary')
//    compile project(':javalib')

    compile files('libs/tbs_sdk_thirdapp_v3.2.0.1104_43200_sharewithdownload_withfilereader_withoutGame_obfs_20170609_115346.jar')
}

//import com.android.build.api.transform.DirectoryInput
//import com.android.build.api.transform.JarInput
//import com.android.build.api.transform.QualifiedContent
//import com.android.build.api.transform.Transform
//import com.android.build.api.transform.TransformException
//import com.android.build.api.transform.TransformInput
//import com.android.build.api.transform.TransformInvocation
//import com.android.build.gradle.internal.pipeline.TransformTask
//import com.google.common.collect.Lists
import java.lang.reflect.Field

//public class MyDexArchiveBuilderTransform extends com.android.build.api.transform.Transform {
//    com.android.build.api.transform.Transform base
//
//    MyDexArchiveBuilderTransform(com.android.build.api.transform.Transform base) {
//        this.base = base
//    }
//
//    @Override
//    String getName() {
//        return base.getName()
//    }
//
//    @Override
//    Set<QualifiedContent.ContentType> getInputTypes() {
//        return base.getInputTypes()
//    }
//
//    @Override
//    Set<? super QualifiedContent.Scope> getScopes() {
//        return base.getScopes()
//    }
//
//    @Override
//    boolean isIncremental() {
//        return base.isIncremental()
//    }
//
//    @Override
//    public void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {
//        List<JarInput> jarInputs = Lists.newArrayList();
//        List<DirectoryInput> dirInputs = Lists.newArrayList();
//
//        for (TransformInput input : transformInvocation.getInputs()) {
//            jarInputs.addAll(input.getJarInputs());
//        }
//        for (TransformInput input : transformInvocation.getInputs()) {
//            dirInputs.addAll(input.getDirectoryInputs());
//        }
//        for (JarInput jarInput : jarInputs) {
//            println("===dex jar      : ${jarInput.file}")
//        }
//        for (DirectoryInput directoryInput : dirInputs) {
//            println("===dex directory: ${directoryInput.file}")
//        }
//
//        //打桩
//        base.transform(transformInvocation)
//    }
//
//    public static Field getFieldByName(Class<?> aClass, String name) {
//        Class<?> currentClass = aClass;
//        while (currentClass != null) {
//            try {
//                return currentClass.getDeclaredField(name);
//            } catch (NoSuchFieldException e) {
//                // ignored.
//            }
//            currentClass = currentClass.getSuperclass();
//        }
//        return null;
//    }
//}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def variantOutput = variant.outputs.first()

        if (variantName.contains("Debug")) {
            println "####featureResourcePackages: " + variantOutput.processResources.featureResourcePackages.getFiles()

            variant.mergeResources.doFirst {
                println "variant.mergeResources.getPublicFile: " + variant.mergeResources.getPublicFile()
                Class resClass = Class.forName("com.android.build.gradle.tasks.MergeResources")
                Field resSetSupplierField = resClass.getDeclaredField("resSetSupplier")
                resSetSupplierField.setAccessible(true)

                List<String> resSetSupplierList = resSetSupplierField.get(mergeResources).get()
                resSetSupplierList.add(new File(project.projectDir,"res-keep"))

                variant.mergeResources.setPublicFile(new File(project.projectDir,"res-keep/public.xml"))
                println "variant.mergeResources.resSetSupplier.get(): " + resSetSupplierList
            }

            variantOutput.processResources.doLast {
                def config = variant.getVariantData().getVariantConfiguration()
                println "getBaseName: " + config.getBaseName()
                File file = new File(variantOutput.processResources.getResPackageOutputFolder(),"resources-" + config.getFullName()  + ".ap_")
                System.out.println("resPackageOutputFile: " + file + " ,ex: " + file.exists())
            }

//            project.getGradle().getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
//                @Override
//                public void graphPopulated(TaskExecutionGraph taskGraph) {
//                    for (Task task : taskGraph.getAllTasks()) {
//                        if (task.getProject().equals(project)
//                                && task instanceof com.android.build.gradle.internal.pipeline.TransformTask
//                                //fix #
//                                && task.name.endsWith("DexBuilderFor" + variantName)) {
//
//                            Transform transform = ((TransformTask) task).getTransform()
//
//                            //transformClassesWithDexBuilderForDebug
//                            if ((((transform instanceof com.android.build.gradle.internal.transforms.DexArchiveBuilderTransform)) && !(transform instanceof MyDexArchiveBuilderTransform))) {
//                                //代理DexTransform,实现自定义的转换
//                                MyDexArchiveBuilderTransform fastdexTransform = new MyDexArchiveBuilderTransform(transform)
//
//                                //Class transformTaskClass = Class.forName("com.android.build.gradle.internal.pipeline")
//
//                                Field field = MyDexArchiveBuilderTransform.getFieldByName(task.getClass(),'transform')
//                                //Field field = transformTaskClass.getDeclaredField("transform")
//
//                                //println "field val: " + field.get(task)
//
//                                field.setAccessible(true)
//                                field.set(task,fastdexTransform)
//                            }
//                        }
//                    }
//                }
//            });
        }
    }
}